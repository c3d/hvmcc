use crate::fun::syntax::{CaseExpr, Expr, Function, Id, Rule, Oper, FuncProgram};
use crate::imp::syntax::{CaseStmt, Imp, Procedure, Program};

grammar;


pub Program: Program =
    <Imp*> =>
        Program(<>);

pub FuncProgram: FuncProgram =
    <Function*> =>
        FuncProgram(<>);

pub Imp: Imp = {
    "begin" <stmts: Imp*> "end" =>
        Imp::Block{<>},
    "procedure" <name:Id> "(" <args:Id*> ")" <body:Imp> =>
        Imp::ProcedureDef{ name, args, body: Box::new(body) },
    <name:Id> ":" <stmt:Imp> =>
        Imp::Label { name, stmt: Box::new(stmt) },
    "match" <expr:Expr> <cases:CaseStmt*> "else" <default:Imp> =>
        Imp::MatchStmt { expr, cases, default: Box::new(default) },
    "if" <condition:Expr> <true_case:Imp> "else" <false_case:Imp> =>
        Imp::IfElse{ condition, true_case: Box::new(true_case), false_case: Box::new(false_case) },
    "for" "(" <initialize:Imp> "," <condition:Expr> "," <afterthought:Imp> ")" <body:Imp> "else" <else_case:Imp> =>
        Imp::ForElse{ initialize: Box::new(initialize), condition, afterthought: Box::new(afterthought), body: Box::new(body), else_case: Box::new(else_case) },
    "for" <target:Id> "in" <iterator:Expr> <body:Imp> "else" <else_case:Imp> =>
        Imp::ForInElse{target, iterator, body: Box::new(body), else_case: Box::new(else_case)},
    "while" <condition:Expr> <body:Imp> "else" <else_case:Imp> =>
        Imp::WhileElse{condition, body: Box::new(body), else_case: Box::new(else_case)},
    <name:Id> "=" <expr:Expr> ";" =>
        Imp::Assignment{<>},
    <expr: Expr> ";" =>
        Imp::Expression{<>},
    "return" <value:Expr> ";" =>
        Imp::Return{<>},
    "goto" <name:Id> ";" =>
        Imp::Goto{<>},
    "continue" ";" =>
        Imp::Continue,
    "break" ";" =>
        Imp::Break,
    "pass" ";" =>
        Imp::Pass,
};

CaseStmt: CaseStmt =
    <matched:Expr> "=>" <body:Imp> "end" =>
        CaseStmt{<>};

pub Function: Function =
    "function" <name:Id> "(" <args:Id*> ")" "{" <rules:Rule+> "}" =>
        Function{<>};

pub Rule: Rule =
    <lhs:Expr> "=" <rhs:Expr> =>
        Rule{ lhs: Box::new(lhs), rhs: Box::new(rhs) };

pub Expr: Expr = {
    "Unit" =>
        Expr::Unit,
    "{" <name:Id> <args:Expr*> "}" =>
        Expr::Ctr{<>},
    "(" <name:Id> <args:Expr*> ")" =>
        Expr::FunCall{<>},
    "let" <name:Id> "=" <expr:Expr> ";" <body:Expr> =>
        Expr::Let{ name, expr: Box::new(expr), body: Box::new(body) },
    "(!" <expr:Expr> <argm:Expr> ")" =>
        Expr::App{ expr: Box::new(expr), argm: Box::new(argm) },
    "(" <op:Oper> <left:Expr> <right:Expr> ")" =>
        Expr::BinOp{ op, left: Box::new(left), right: Box::new(right) },
    r"[Î»@]" <var:Id> <body:Expr> =>
        Expr::Lambda{ var, body: Box::new(body) },
    "match" <scrutinee:Expr> "{" <cases:(CaseExpr+)> "}" =>
        Expr::MatchExpr{ scrutinee: Box::new(scrutinee), cases: cases },
    <num:Num> =>
        num,
    <name:Id> =>
        Expr::Var{<>},
};

pub Num: Expr = {
    <hex: r"0x[0-9a-fA-F]+"> =>
        Expr::Unsigned{ numb: u64::from_str_radix(&hex[2..], 16).unwrap() },
    <dec: r"[0-9]+"> =>
        Expr::Unsigned{ numb: dec.parse::<u64>().unwrap() },
    <point: r"[0-9]+\.[0-9]*"> =>
        Expr::Float{ numb: point.parse::<f64>().unwrap() },
};

pub Oper: Oper = {
    "+"  => Oper::Add,
    "-"  => Oper::Sub,
    "*"  => Oper::Mul,
    "/"  => Oper::Div,
    "%"  => Oper::Mod,
    ">>" => Oper::Shr,
    "<<" => Oper::Shl,
    "==" => Oper::Eql,
    "!=" => Oper::Neq,
    "&"  => Oper::And,
    "|"  => Oper::Or,
    "^"  => Oper::Xor,
    ">=" => Oper::Gte,
    ">"  => Oper::Gtn,
    "<=" => Oper::Lte,
    "<"  => Oper::Ltn,
};

pub CaseExpr: CaseExpr =
    <matched: Expr> "=>" <body: Expr> =>
        CaseExpr{ matched: Box::new(matched), body: Box::new(body) };

pub Id: Id =
    r"[a-zA-Z_.][a-zA-Z_.0-9]*" =>
        String::from(<>);